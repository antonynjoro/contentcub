generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  externalId String   @unique
  email     String   @unique
  firstName String
  lastName  String
  clients   Client[]
  requests  Request[]
  attributes Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  externalId String?   @unique
  email     String   @unique
  firstName      String?
  lastName       String?
  requestIds  String[]  @db.ObjectId
  requests    Request[] @relation(fields: [requestIds], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("userId") @db.ObjectId
  attributes Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Request {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  status    Status   @default(draft)
  questions Question[] 
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("userId") @db.ObjectId
  clientIds   String[]  @db.ObjectId
  clients     Client[]  @relation(fields: [clientIds], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  draft
  sent
  answered
  closed
}

model Question {
  id        String    @default(auto()) @id @map("_id") @db.ObjectId
  requestId   String?  @map("requestId") @db.ObjectId
  request     Request? @relation(fields: [requestId], references: [id])
  type      QuestionType
  multiAnswer Boolean @default(false)
  title     String
  description String?
  answers    Answer[]
  createdAt DateTime @default(now())
}

type Answer {
  id String @default(uuid())
  value String
}

enum QuestionType {
  textShort
  textLong
  imageUpload
  imageUploadMultiple
  fileUpload
}


